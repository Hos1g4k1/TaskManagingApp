@page "/tasks/{Id:long}"
@using BlazorWebApp.Models
@using BlazorWebApp.Services
@inject TaskService TaskService
@inject NavigationManager NavigationManager

<PageTitle>Task Details - Task Management</PageTitle>

<div class="container">
    @if (IsLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (Task == null)
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-circle"></i> Task not found or could not be loaded.
        </div>
        <button class="btn btn-primary" @onclick="() => NavigationManager.NavigateTo(tasksUrl)">
            <i class="bi bi-arrow-left"></i> Back to Tasks
        </button>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>@Task.Title</h1>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-primary" @onclick="NavigateBack">
                    <i class="bi bi-arrow-left"></i> Back
                </button>
                <button class="btn btn-secondary" @onclick="() => NavigationManager.NavigateTo(editTaskUrl)">
                    <i class="bi bi-pencil"></i> Edit
                </button>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Task Details</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-3 fw-bold">Status:</div>
                            <div class="col-md-9">
                                @if (!string.IsNullOrEmpty(Task.StatusName))
                                {
                                    <span class="badge @GetStatusBadgeClass(Task.StatusName)">@Task.StatusName</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">No Status</span>
                                }
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-3 fw-bold">Project:</div>
                            <div class="col-md-9">
                                @if (!string.IsNullOrEmpty(Task.ProjectName))
                                {
                                    <span class="badge bg-info">@Task.ProjectName</span>
                                }
                                else
                                {
                                    <span class="text-muted">No project assigned</span>
                                }
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-3 fw-bold">Due Date:</div>
                            <div class="col-md-9">
                                @if (Task.DueDate.HasValue)
                                {
                                    var daysUntilDue = (Task.DueDate.Value - DateTime.Now).Days;
                                    <span class="@GetDueDateClass(daysUntilDue)">
                                        @Task.DueDate.Value.ToString("MMMM dd, yyyy")
                                        @if (daysUntilDue < 0)
                                        {
                                            <span class="ms-2 badge bg-danger">Overdue</span>
                                        }
                                        else if (daysUntilDue == 0)
                                        {
                                            <span class="ms-2 badge bg-warning">Due Today</span>
                                        }
                                        else if (daysUntilDue <= 3)
                                        {
                                            <span class="ms-2 badge bg-info">Due Soon</span>
                                        }
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted">No due date set</span>
                                }
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-3 fw-bold">Created:</div>
                            <div class="col-md-9">@Task.CreatedAt.ToString("MMMM dd, yyyy 'at' hh:mm tt")</div>
                        </div>
                        @if (!string.IsNullOrEmpty(Task.Description))
                        {
                            <div class="row mb-3">
                                <div class="col-md-3 fw-bold">Description:</div>
                                <div class="col-md-9">
                                    <div class="border rounded p-3 bg-light">
                                        @((MarkupString)Task.Description.Replace("\n", "<br>"))
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Comments (@Task.CommentCount)</h5>
                        <button class="btn btn-sm btn-outline-primary" @onclick="LoadComments">
                            <i class="bi bi-chat-dots"></i> Load Comments
                        </button>
                    </div>
                    <div class="card-body">
                        @if (Task.CommentCount == 0)
                        {
                            <div class="text-center py-4">
                                <i class="bi bi-chat text-muted" style="font-size: 2rem;"></i>
                                <p class="text-muted mt-2">No comments yet</p>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <i class="bi bi-info-circle"></i> Comments functionality will be implemented in future updates.
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Quick Actions</h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-primary"
                                @onclick="() => NavigationManager.NavigateTo(editTaskUrl)">
                                <i class="bi bi-pencil"></i> Edit Task
                            </button>
                            <button class="btn btn-outline-secondary"
                                @onclick="() => NavigationManager.NavigateTo(projectUrl)">
                                <i class="bi bi-folder"></i> View Project
                            </button>
                            <button class="btn btn-outline-info" @onclick="LoadComments">
                                <i class="bi bi-chat-dots"></i> View Comments
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public long Id { get; set; }

    private TaskItem? Task { get; set; }
    private bool IsLoading { get; set; } = true;

    // Navigation URLs
    private string tasksUrl = "/tasks";
    private string editTaskUrl => $"/tasks/edit/{Task?.TaskId}";
    private string projectUrl => $"/projects/{Task?.ProjectId}";

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        await LoadTask();
        IsLoading = false;
    }

    private async System.Threading.Tasks.Task LoadTask()
    {
        try
        {
            Task = await TaskService.GetTaskByIdAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading task: {ex.Message}");
            Task = null;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo(tasksUrl);
    }

    private void LoadComments()
    {
        // TODO: Implement comments loading
        Console.WriteLine("Loading comments...");
    }

    private string GetStatusBadgeClass(string statusName)
    {
        return statusName.ToLower() switch
        {
            "completed" => "bg-success",
            "in progress" => "bg-warning",
            "pending" => "bg-info",
            "blocked" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetDueDateClass(int daysUntilDue)
    {
        if (daysUntilDue < 0)
        {
            return "text-danger fw-bold"; // Overdue
        }
        else if (daysUntilDue == 0)
        {
            return "text-warning fw-bold"; // Due today
        }
        else if (daysUntilDue <= 3)
        {
            return "text-warning"; // Due soon
        }
        else
        {
            return "text-muted";
        }
    }
}
