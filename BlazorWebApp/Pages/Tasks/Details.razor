@page "/tasks/{Id:long}"
@using BlazorWebApp.Models
@using BlazorWebApp.Services
@inject TaskService TaskService
@inject CommentService CommentService
@inject TaskDependencyService TaskDependencyService
@inject NavigationManager NavigationManager

<PageTitle>Task Details - @(Task?.Title ?? "Loading...")</PageTitle>

<div class="container">
    @if (IsLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (Task == null)
    {
        <div class="alert alert-danger">
            <h4>Task Not Found</h4>
            <p>The requested task could not be found.</p>
            <button class="btn btn-primary" @onclick="NavigateBack">
                <i class="bi bi-arrow-left"></i> Back to Tasks
            </button>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>@Task.Title</h1>
            <button class="btn btn-outline-secondary" @onclick="NavigateBack">
                <i class="bi bi-arrow-left"></i> Back
            </button>
        </div>

        <div class="row">
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Task Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-3 fw-bold">Status:</div>
                            <div class="col-md-9">
                                <span class="badge @GetStatusBadgeClass(Task.StatusName ?? "Unknown")">
                                    @(Task.StatusName ?? "No Status")
                                </span>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-3 fw-bold">Project:</div>
                            <div class="col-md-9">
                                <a href="@projectUrl" class="text-decoration-none">
                                    @(Task.ProjectName ?? "Unknown Project")
                                </a>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-3 fw-bold">Created:</div>
                            <div class="col-md-9">@Task.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")</div>
                        </div>

                        @if (Task.DueDate.HasValue)
                        {
                            var daysUntilDue = (Task.DueDate.Value.Date - DateTime.Today).Days;
                            <div class="row mb-3">
                                <div class="col-md-3 fw-bold">Due Date:</div>
                                <div class="col-md-9">
                                    <span class="@GetDueDateClass(daysUntilDue)">
                                        @Task.DueDate.Value.ToString("MMM dd, yyyy")
                                        @if (daysUntilDue < 0)
                                        {
                                            <span class="badge bg-danger ms-2">Overdue</span>
                                        }
                                        else if (daysUntilDue == 0)
                                        {
                                            <span class="badge bg-warning ms-2">Due Today</span>
                                        }
                                        else if (daysUntilDue <= 3)
                                        {
                                            <span class="badge bg-warning ms-2">Due Soon</span>
                                        }
                                    </span>
                                </div>
                            </div>
                        }

                        @if (!string.IsNullOrWhiteSpace(Task.Description))
                        {
                            <div class="row mb-3">
                                <div class="col-md-3 fw-bold">Description:</div>
                                <div class="col-md-9">
                                    <div class="border rounded p-3 bg-light">
                                        @((MarkupString)Task.Description.Replace("\n", "<br>"))
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Task Dependencies Section -->
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Task Dependencies</h5>
                        <button class="btn btn-sm btn-outline-primary" @onclick="ToggleManageDependencies">
                            <i class="bi bi-gear"></i> Manage Dependencies
                        </button>
                    </div>
                    <div class="card-body">
                        @if (ShowManageDependencies)
                        {
                            <div class="mb-4 p-3 border rounded bg-light">
                                <h6>Add New Dependency</h6>
                                <div class="row">
                                    <div class="col-md-8">
                                        <select @bind="SelectedDependencyTaskId" class="form-select">
                                            <option value="0">Select a task this task depends on...</option>
                                            @foreach (var availableTask in AvailableTasks)
                                            {
                                                <option value="@availableTask.TaskId">@availableTask.Title</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <button class="btn btn-primary" @onclick="AddDependency" disabled="@(SelectedDependencyTaskId == 0 || IsAddingDependency)">
                                            @if (IsAddingDependency)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2"></span>
                                            }
                                            Add Dependency
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (Dependencies.Count == 0)
                        {
                            <div class="text-center py-4">
                                <i class="bi bi-link text-muted" style="font-size: 2rem;"></i>
                                <p class="text-muted mt-2">This task has no dependencies</p>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col-md-6">
                                    <h6>Dependencies (Tasks this task depends on):</h6>
                                    @if (Dependencies.Count == 0)
                                    {
                                        <p class="text-muted">None</p>
                                    }
                                    else
                                    {
                                        @foreach (var dependency in Dependencies)
                                        {
                                            <div class="d-flex justify-content-between align-items-center mb-2 p-2 border rounded">
                                                <div>
                                                    <a href="/tasks/@dependency.TaskId" class="text-decoration-none">
                                                        @dependency.TaskTitle
                                                    </a>
                                                    @if (!string.IsNullOrEmpty(dependency.TaskStatusName))
                                                    {
                                                        <span class="badge @GetStatusBadgeClass(dependency.TaskStatusName) ms-2">
                                                            @dependency.TaskStatusName
                                                        </span>
                                                    }
                                                </div>
                                                @if (ShowManageDependencies)
                                                {
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteDependency(dependency.DependencyId)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                }
                                            </div>
                                        }
                                    }
                                </div>
                                <div class="col-md-6">
                                    <h6>Dependents (Tasks that depend on this task):</h6>
                                    @if (Dependents.Count == 0)
                                    {
                                        <p class="text-muted">None</p>
                                    }
                                    else
                                    {
                                        @foreach (var dependent in Dependents)
                                        {
                                            <div class="d-flex justify-content-between align-items-center mb-2 p-2 border rounded">
                                                <div>
                                                    <a href="/tasks/@dependent.DependentTaskId" class="text-decoration-none">
                                                        @dependent.DependentTaskTitle
                                                    </a>
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        }

                        @if (!CanTaskBeCompleted)
                        {
                            <div class="alert alert-warning mt-3">
                                <i class="bi bi-exclamation-triangle"></i>
                                <strong>Note:</strong> This task cannot be completed until all its dependencies are completed.
                            </div>
                        }
                    </div>
                </div>

                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Comments (@Comments.Count)</h5>
                        <button class="btn btn-sm btn-outline-primary" @onclick="ToggleAddComment">
                            <i class="bi bi-plus-circle"></i> Add Comment
                        </button>
                    </div>
                    <div class="card-body">
                        @if (ShowAddComment)
                        {
                            <div class="mb-4 p-3 border rounded bg-light">
                                <h6>Add New Comment</h6>
                                <EditForm Model="@NewComment" OnValidSubmit="@HandleAddComment">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    
                                    <div class="mb-3">
                                        <label class="form-label">Comment</label>
                                        <textarea @bind="NewComment.Content" 
                                                  class="form-control" 
                                                  rows="3" 
                                                  placeholder="Enter your comment..."></textarea>
                                        <ValidationMessage For="() => NewComment.Content" />
                                    </div>
                                    
                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-primary" disabled="@IsAddingComment">
                                            @if (IsAddingComment)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2"></span>
                                            }
                                            Add Comment
                                        </button>
                                        <button type="button" class="btn btn-secondary" @onclick="CancelAddComment">
                                            Cancel
                                        </button>
                                    </div>
                                </EditForm>
                            </div>
                        }

                        @if (Comments.Count == 0)
                        {
                            <div class="text-center py-4">
                                <i class="bi bi-chat text-muted" style="font-size: 2rem;"></i>
                                <p class="text-muted mt-2">No comments yet</p>
                            </div>
                        }
                        else
                        {
                            @foreach (var comment in Comments.OrderBy(c => c.CreatedAt))
                            {
                                <div class="comment-item mb-3 p-3 border rounded @(EditingCommentId == comment.CommentId ? "border-primary" : "")">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <small class="text-muted">
                                            @comment.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")
                                        </small>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                <i class="bi bi-three-dots"></i>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li><a class="dropdown-item" href="#" @onclick="() => StartEditComment(comment)">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </a></li>
                                                <li><a class="dropdown-item text-danger" href="#" @onclick="() => DeleteComment(comment.CommentId)">
                                                    <i class="bi bi-trash"></i> Delete
                                                </a></li>
                                            </ul>
                                        </div>
                                    </div>
                                    
                                    @if (EditingCommentId == comment.CommentId)
                                    {
                                        <EditForm Model="@EditingComment" OnValidSubmit="@HandleUpdateComment">
                                            <DataAnnotationsValidator />
                                            <ValidationSummary />
                                            
                                            <div class="mb-3">
                                                <textarea @bind="EditingComment.Content" 
                                                          class="form-control" 
                                                          rows="3"></textarea>
                                                <ValidationMessage For="() => EditingComment.Content" />
                                            </div>
                                            
                                            <div class="d-flex gap-2">
                                                <button type="submit" class="btn btn-primary btn-sm" disabled="@IsUpdatingComment">
                                                    @if (IsUpdatingComment)
                                                    {
                                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                                    }
                                                    Update
                                                </button>
                                                <button type="button" class="btn btn-secondary btn-sm" @onclick="CancelEditComment">
                                                    Cancel
                                                </button>
                                            </div>
                                        </EditForm>
                                    }
                                    else
                                    {
                                        <div class="comment-content">
                                            @((MarkupString)comment.Content.Replace("\n", "<br>"))
                                        </div>
                                    }
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Quick Actions</h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-primary"
                                @onclick="() => NavigationManager.NavigateTo(editTaskUrl)">
                                <i class="bi bi-pencil"></i> Edit Task
                            </button>
                            <button class="btn btn-outline-secondary"
                                @onclick="() => NavigationManager.NavigateTo(projectUrl)">
                                <i class="bi bi-folder"></i> View Project
                            </button>
                            <button class="btn btn-outline-info" @onclick="LoadComments">
                                <i class="bi bi-arrow-clockwise"></i> Refresh Comments
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public long Id { get; set; }

    private TaskItem? Task { get; set; }
    private List<Comment> Comments { get; set; } = new();
    private List<TaskDependency> Dependencies { get; set; } = new();
    private List<TaskDependency> Dependents { get; set; } = new();
    private List<TaskItem> AvailableTasks { get; set; } = new();
    private Comment NewComment { get; set; } = new();
    private Comment EditingComment { get; set; } = new();
    private long EditingCommentId { get; set; } = 0;
    private bool IsLoading { get; set; } = true;
    private bool ShowAddComment { get; set; } = false;
    private bool IsAddingComment { get; set; } = false;
    private bool IsUpdatingComment { get; set; } = false;
    private bool ShowManageDependencies { get; set; } = false;
    private bool IsAddingDependency { get; set; } = false;
    private long SelectedDependencyTaskId { get; set; } = 0;
    private bool CanTaskBeCompleted { get; set; } = true;

    // Navigation URLs
    private string tasksUrl = "/tasks";
    private string editTaskUrl => $"/tasks/edit/{Task?.TaskId}";
    private string projectUrl => $"/projects/{Task?.ProjectId}";

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        await LoadTask();
        await LoadComments();
        await LoadDependencies();
        await LoadAvailableTasks();
        await CheckTaskCompletionEligibility();
        InitializeNewComment();
        IsLoading = false;
    }

    private async System.Threading.Tasks.Task LoadTask()
    {
        try
        {
            Task = await TaskService.GetTaskByIdAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading task: {ex.Message}");
            Task = null;
        }
    }

    private async System.Threading.Tasks.Task LoadComments()
    {
        try
        {
            Comments = await CommentService.GetCommentsByTaskAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading comments: {ex.Message}");
            Comments = new List<Comment>();
        }
    }

    private async System.Threading.Tasks.Task LoadDependencies()
    {
        try
        {
            Dependencies = await TaskDependencyService.GetDependenciesForTaskAsync(Id);
            Dependents = await TaskDependencyService.GetDependentsForTaskAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dependencies: {ex.Message}");
            Dependencies = new List<TaskDependency>();
            Dependents = new List<TaskDependency>();
        }
    }

    private async System.Threading.Tasks.Task LoadAvailableTasks()
    {
        try
        {
            var allTasks = await TaskService.GetAllTasksAsync();
            // Filter out the current task and tasks that would create circular dependencies
            AvailableTasks = allTasks.Where(t => t.TaskId != Id).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading available tasks: {ex.Message}");
            AvailableTasks = new List<TaskItem>();
        }
    }

    private async System.Threading.Tasks.Task CheckTaskCompletionEligibility()
    {
        try
        {
            CanTaskBeCompleted = await TaskDependencyService.CanTaskBeCompletedAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking task completion eligibility: {ex.Message}");
            CanTaskBeCompleted = true;
        }
    }

    private void InitializeNewComment()
    {
        NewComment = new Comment
        {
            TaskId = Id,
            CreatedAt = DateTime.Now
        };
    }

    private void ToggleAddComment()
    {
        ShowAddComment = !ShowAddComment;
        if (ShowAddComment)
        {
            InitializeNewComment();
        }
    }

    private void ToggleManageDependencies()
    {
        ShowManageDependencies = !ShowManageDependencies;
    }

    private async System.Threading.Tasks.Task AddDependency()
    {
        if (SelectedDependencyTaskId == 0)
            return;

        IsAddingDependency = true;

        try
        {
            var newDependency = new TaskDependency
            {
                TaskId = SelectedDependencyTaskId,
                DependentTaskId = Id
            };

            var createdDependency = await TaskDependencyService.CreateDependencyAsync(newDependency);
            
            if (createdDependency != null)
            {
                await LoadDependencies();
                await CheckTaskCompletionEligibility();
                SelectedDependencyTaskId = 0;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding dependency: {ex.Message}");
        }
        finally
        {
            IsAddingDependency = false;
        }
    }

    private async System.Threading.Tasks.Task DeleteDependency(long dependencyId)
    {
        try
        {
            if (await TaskDependencyService.DeleteDependencyAsync(dependencyId))
            {
                await LoadDependencies();
                await CheckTaskCompletionEligibility();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting dependency: {ex.Message}");
        }
    }

    private void CancelAddComment()
    {
        ShowAddComment = false;
        InitializeNewComment();
    }

    private async System.Threading.Tasks.Task HandleAddComment()
    {
        if (string.IsNullOrWhiteSpace(NewComment.Content))
            return;

        IsAddingComment = true;
        
        try
        {
            NewComment.CreatedAt = DateTime.Now;
            var createdComment = await CommentService.CreateCommentAsync(NewComment);
            
            if (createdComment != null)
            {
                Comments.Add(createdComment);
                CancelAddComment();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding comment: {ex.Message}");
        }
        finally
        {
            IsAddingComment = false;
        }
    }

    private void StartEditComment(Comment comment)
    {
        EditingCommentId = comment.CommentId;
        EditingComment = new Comment
        {
            CommentId = comment.CommentId,
            TaskId = comment.TaskId,
            Content = comment.Content,
            CreatedAt = comment.CreatedAt
        };
    }

    private void CancelEditComment()
    {
        EditingCommentId = 0;
        EditingComment = new Comment();
    }

    private async System.Threading.Tasks.Task HandleUpdateComment()
    {
        if (string.IsNullOrWhiteSpace(EditingComment.Content))
            return;

        IsUpdatingComment = true;
        
        try
        {
            var updatedComment = await CommentService.UpdateCommentAsync(EditingComment);
            
            if (updatedComment != null)
            {
                var index = Comments.FindIndex(c => c.CommentId == EditingComment.CommentId);
                if (index >= 0)
                {
                    Comments[index] = updatedComment;
                }
                CancelEditComment();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating comment: {ex.Message}");
        }
        finally
        {
            IsUpdatingComment = false;
        }
    }

    private async System.Threading.Tasks.Task DeleteComment(long commentId)
    {
        if (await CommentService.DeleteCommentAsync(commentId))
        {
            Comments.RemoveAll(c => c.CommentId == commentId);
            StateHasChanged();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo(tasksUrl);
    }

    private string GetStatusBadgeClass(string statusName)
    {
        return statusName.ToLower() switch
        {
            "completed" => "bg-success",
            "in progress" => "bg-warning",
            "pending" => "bg-info",
            "blocked" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetDueDateClass(int daysUntilDue)
    {
        if (daysUntilDue < 0)
        {
            return "text-danger fw-bold"; // Overdue
        }
        else if (daysUntilDue == 0)
        {
            return "text-warning fw-bold"; // Due today
        }
        else if (daysUntilDue <= 3)
        {
            return "text-warning"; // Due soon
        }
        else
        {
            return "text-muted";
        }
    }
}
