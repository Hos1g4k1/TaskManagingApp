@page "/projects/{Id:long}"
@using BlazorWebApp.Models
@using BlazorWebApp.Services
@using BlazorWebApp.Components.Tasks
@inject ProjectService ProjectService
@inject StatusService StatusService
@inject TaskService TaskService
@inject NavigationManager NavigationManager

<PageTitle>Project Details - Task Management</PageTitle>

<div class="container">
    @if (IsLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (Project == null)
    {
        <div class="alert alert-danger">
            Project not found or could not be loaded.
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>@Project.Name</h1>
            <div>
                <button class="btn btn-outline-primary me-2" @onclick="NavigateBack">
                    <i class="bi bi-arrow-left"></i> Back
                </button>
                <a href="/projects/edit/@Project.ProjectId" class="btn btn-secondary">
                    <i class="bi bi-pencil"></i> Edit
                </a>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-3 fw-bold">Status:</div>
                    <div class="col-md-9">
                        <span class="badge bg-primary">@Project.StatusName</span>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-3 fw-bold">Description:</div>
                    <div class="col-md-9">@Project.Description</div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-3 fw-bold">Start Date:</div>
                    <div class="col-md-9">@(Project.StartDate?.ToShortDateString() ?? "Not set")</div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-3 fw-bold">End Date:</div>
                    <div class="col-md-9">@(Project.EndDate?.ToShortDateString() ?? "Not set")</div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-3 fw-bold">Tasks:</div>
                    <div class="col-md-9">
                        <span class="badge bg-info">@Tasks.Count Total</span>
                        @if (Tasks.Any())
                        {
                            var completedTasks = Tasks.Count(t => t.StatusName?.ToLower() == "completed");
                            var overdueTasks = Tasks.Count(t => t.DueDate.HasValue && t.DueDate.Value < DateTime.Now);

                            <span class="badge bg-success ms-2">@completedTasks Completed</span>
                            @if (overdueTasks > 0)
                            {
                                <span class="badge bg-danger ms-2">@overdueTasks Overdue</span>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-between align-items-center mb-3">
            <h2>Project Tasks</h2>
            <button class="btn btn-success" @onclick="NavigateToCreateTask">
                <i class="bi bi-plus-circle"></i> Add Task
            </button>
        </div>

        @if (TasksLoading)
        {
            <div class="d-flex justify-content-center my-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading tasks...</span>
                </div>
            </div>
        }
        else
        {
            <TaskList Tasks="@Tasks" OnCreateTask="NavigateToCreateTask" OnDeleteTask="HandleDeleteTask" />
        }
    }
</div>

@code {
    [Parameter]
    public long Id { get; set; }

    private Project? Project { get; set; }
    private List<TaskItem> Tasks { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private bool TasksLoading { get; set; } = true;

    protected override async System.Threading.Tasks.Task OnParametersSetAsync()
    {
        IsLoading = true;
        TasksLoading = true;

        try
        {
            // Load project and tasks in parallel
            await System.Threading.Tasks.Task.WhenAll(
            LoadProjectAsync(),
            LoadTasksAsync()
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }

        IsLoading = false;
        TasksLoading = false;
    }

    private async System.Threading.Tasks.Task LoadProjectAsync()
    {
        try
        {
            Project = await ProjectService.GetProjectByIdAsync(Id);

            // If status name is missing but we have a status ID, fetch the status name
            if (Project != null && Project.StatusId.HasValue && string.IsNullOrEmpty(Project.StatusName))
            {
                var status = await StatusService.GetStatusByIdAsync(Project.StatusId.Value);
                if (status != null)
                {
                    Project.StatusName = status.Name;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading project: {ex.Message}");
            Project = null;
        }
    }

    private async System.Threading.Tasks.Task LoadTasksAsync()
    {
        try
        {
            Tasks = await TaskService.GetTasksByProjectAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tasks: {ex.Message}");
            Tasks = new List<TaskItem>();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/dashboard");
    }

    private void NavigateToCreateTask()
    {
        NavigationManager.NavigateTo($"/tasks/create/{Id}");
    }

    private async System.Threading.Tasks.Task HandleDeleteTask(long taskId)
    {
        try
        {
            await TaskService.DeleteTaskAsync(taskId);
            await LoadTasksAsync(); // Refresh the task list
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting task: {ex.Message}");
        }
    }
}