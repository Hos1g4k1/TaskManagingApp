@using BlazorWebApp.Models
@using BlazorWebApp.Services
@inject NavigationManager NavigationManager
@inject TaskDependencyService TaskDependencyService

@if (Tasks?.Count > 0)
{
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Tasks (@Tasks.Count)</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Status</th>
                            <th>Dependencies</th>
                            <th>Due Date</th>
                            <th>Project</th>
                            <th>Comments</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var task in Tasks)
                        {
                            <tr class="task-row" @onclick="() => ViewTask(task.TaskId)" style="cursor: pointer;">
                                <td>
                                    <div class="task-title-container">
                                        <strong>@task.Title</strong>
                                        @if (!string.IsNullOrEmpty(task.Description))
                                        {
                                            <br>
                                            <small class="text-muted">@(task.Description.Length > 100 ? task.Description.Substring(0, 100) + "..." : task.Description)</small>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        @if (!string.IsNullOrEmpty(task.StatusName))
                                        {
                                            <span class="badge @GetStatusBadgeClass(task.StatusName)">@task.StatusName</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">No Status</span>
                                        }
                                    </div>
                                </td>
                                <td>
                                    @if (TaskDependencyData.ContainsKey(task.TaskId))
                                    {
                                        var depInfo = TaskDependencyData[task.TaskId];
                                        <div>
                                            @if (depInfo.HasDependencies)
                                            {
                                                <span class="badge bg-info me-1" title="Dependencies: @depInfo.DependencyCount">
                                                    <i class="bi bi-arrow-down"></i> @depInfo.DependencyCount
                                                </span>
                                            }
                                            @if (depInfo.HasDependents)
                                            {
                                                <span class="badge bg-secondary me-1" title="Dependents: @depInfo.DependentCount">
                                                    <i class="bi bi-arrow-up"></i> @depInfo.DependentCount
                                                </span>
                                            }
                                            @if (depInfo.IsBlocked)
                                            {
                                                <span class="badge bg-warning" title="Blocked by incomplete dependencies">
                                                    <i class="bi bi-exclamation-triangle"></i> Blocked
                                                </span>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    @if (task.DueDate.HasValue)
                                    {
                                        var daysUntilDue = (task.DueDate.Value.Date - DateTime.Today).Days;
                                        <span class="@GetDueDateClass(daysUntilDue)">
                                            @task.DueDate.Value.ToString("MMM dd")
                                            @if (daysUntilDue < 0)
                                            {
                                                <span class="badge bg-danger ms-1">Overdue</span>
                                            }
                                            else if (daysUntilDue == 0)
                                            {
                                                <span class="badge bg-warning ms-1">Today</span>
                                            }
                                            else if (daysUntilDue <= 3)
                                            {
                                                <span class="badge bg-warning ms-1">Soon</span>
                                            }
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No due date</span>
                                    }
                                </td>
                                <td>
                                    <span class="text-muted">@(task.ProjectName ?? "Unknown")</span>
                                </td>
                                <td>
                                    <span class="badge bg-light text-dark">@task.CommentCount</span>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => EditTask(task.TaskId))" @onclick:stopPropagation="true">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="@(() => OnDeleteTask.InvokeAsync(task.TaskId))" @onclick:stopPropagation="true">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-body text-center py-5">
            <i class="bi bi-inbox text-muted" style="font-size: 3rem;"></i>
            <h5 class="mt-3 text-muted">No tasks found</h5>
            <p class="text-muted">Get started by creating your first task</p>
            <button class="btn btn-primary" @onclick="OnCreateTask">
                <i class="bi bi-plus-circle"></i> Create Task
            </button>
        </div>
    </div>
}

<style>
    .task-row {
        transition: background-color 0.2s ease;
    }

    .task-row:hover {
        background-color: rgba(0, 123, 255, 0.05) !important;
    }

    .task-title-container {
        padding: 4px 0;
    }

    .task-row td > div {
        padding: 4px 0;
    }
</style>

@code {
    [Parameter] public List<TaskItem>? Tasks { get; set; }
    [Parameter] public EventCallback OnCreateTask { get; set; }
    [Parameter] public EventCallback<long> OnDeleteTask { get; set; }

    private Dictionary<long, TaskDependencyInfo> TaskDependencyData { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Tasks?.Any() == true)
        {
            await LoadDependencyInfo();
        }
    }

    private async Task LoadDependencyInfo()
    {
        TaskDependencyData.Clear();
        
        foreach (var task in Tasks ?? new List<TaskItem>())
        {
            try
            {
                var dependencies = await TaskDependencyService.GetDependenciesForTaskAsync(task.TaskId);
                var dependents = await TaskDependencyService.GetDependentsForTaskAsync(task.TaskId);
                var canBeCompleted = await TaskDependencyService.CanTaskBeCompletedAsync(task.TaskId);

                TaskDependencyData[task.TaskId] = new TaskDependencyInfo
                {
                    HasDependencies = dependencies.Count > 0,
                    DependencyCount = dependencies.Count,
                    HasDependents = dependents.Count > 0,
                    DependentCount = dependents.Count,
                    IsBlocked = !canBeCompleted && task.StatusName?.ToLower() != "completed"
                };
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading dependency info for task {task.TaskId}: {ex.Message}");
                TaskDependencyData[task.TaskId] = new TaskDependencyInfo();
            }
        }
    }

    private void ViewTask(long taskId)
    {
        NavigationManager.NavigateTo($"/tasks/{taskId}");
    }

    private void EditTask(long taskId)
    {
        NavigationManager.NavigateTo($"/tasks/edit/{taskId}");
    }

    private string GetStatusBadgeClass(string statusName)
    {
        return statusName.ToLower() switch
        {
            "completed" => "bg-success",
            "in progress" => "bg-warning",
            "pending" => "bg-info",
            "blocked" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetDueDateClass(int daysUntilDue)
    {
        if (daysUntilDue < 0)
        {
            return "text-danger fw-bold"; // Overdue
        }
        else if (daysUntilDue == 0)
        {
            return "text-warning fw-bold"; // Due today
        }
        else if (daysUntilDue <= 3)
        {
            return "text-warning"; // Due soon
        }
        else
        {
            return "text-muted";
        }
    }

    private class TaskDependencyInfo
    {
        public bool HasDependencies { get; set; }
        public int DependencyCount { get; set; }
        public bool HasDependents { get; set; }
        public int DependentCount { get; set; }
        public bool IsBlocked { get; set; }
    }
}