@using BlazorWebApp.Models
@using System.ComponentModel.DataAnnotations

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">@(IsEditMode ? "Edit Task" : "Create New Task")</h5>
    </div>
    <div class="card-body">
        <EditForm Model="@Task" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label for="title" class="form-label">Title <span class="text-danger">*</span></label>
                <InputText id="title" class="form-control" @bind-Value="Task.Title" placeholder="Enter task title" />
                <ValidationMessage For="@(() => Task.Title)" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputTextArea id="description" class="form-control" @bind-Value="Task.Description" rows="3"
                    placeholder="Enter task description" />
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="projectId" class="form-label">Project <span class="text-danger">*</span></label>
                    <InputSelect id="projectId" class="form-select" @bind-Value="Task.ProjectId">
                        <option value="">Select a project</option>
                        @if (Projects != null)
                        {
                            @foreach (var project in Projects)
                            {
                                <option value="@project.Key">@project.Value</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Task.ProjectId)" />
                </div>
                <div class="col-md-6">
                    <label for="statusId" class="form-label">Status</label>
                    <InputSelect id="statusId" class="form-select" @bind-Value="Task.StatusId">
                        <option value="">Select a status</option>
                        @if (Statuses != null)
                        {
                            @foreach (var status in Statuses)
                            {
                                <option value="@status.Key">@status.Value</option>
                            }
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="mb-3">
                <label for="dueDate" class="form-label">Due Date</label>
                <InputDate id="dueDate" class="form-control" @bind-Value="Task.DueDate" />
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary" disabled="@IsSaving">
                    @if (IsSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    }
                    @(IsEditMode ? "Update Task" : "Create Task")
                </button>
                <button type="button" class="btn btn-secondary" @onclick="OnCancel">
                    Cancel
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public TaskItem Task { get; set; } = new();
    [Parameter] public Dictionary<long, string>? Projects { get; set; }
    [Parameter] public Dictionary<long, string>? Statuses { get; set; }
    [Parameter] public bool IsEditMode { get; set; } = false;
    [Parameter] public bool IsSaving { get; set; } = false;
    [Parameter] public EventCallback<TaskItem> OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private async System.Threading.Tasks.Task HandleValidSubmit()
    {
        if (IsValidTask())
        {
            await OnSubmit.InvokeAsync(Task);
        }
    }

    private bool IsValidTask()
    {
        if (string.IsNullOrWhiteSpace(Task.Title))
        {
            return false;
        }

        if (Task.ProjectId <= 0)
        {
            return false;
        }

        return true;
    }
}

<style>
    .form-label .text-danger {
        font-size: 0.875rem;
    }
</style>